-- Create the posts table
CREATE TABLE posts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    timestamp TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    posted_text TEXT,
    post_url TEXT,
    topic TEXT,
    status TEXT DEFAULT 'pending' NOT NULL, -- e.g., pending, posted, failed
    error_message TEXT,
    raw_openai_response JSONB,      -- To store the full OpenAI response if needed
    persona_alignment_check TEXT  -- To store the persona alignment check text
);

-- Add comments to columns for clarity
COMMENT ON COLUMN posts.id IS 'Unique identifier for each post';
COMMENT ON COLUMN posts.timestamp IS 'Timestamp of when the post was logged or attempted';
COMMENT ON COLUMN posts.posted_text IS 'The actual text content of the tweet';
COMMENT ON COLUMN posts.post_url IS 'The URL of the tweet on X.com (can be NULL if posting failed or URL not retrieved)';
COMMENT ON COLUMN posts.topic IS 'The topic of the tweet, if available';
COMMENT ON COLUMN posts.status IS 'Status of the post (e.g., pending, posted, failed, generation_failed)';
COMMENT ON COLUMN posts.error_message IS 'Any error message if posting or generation failed';
COMMENT ON COLUMN posts.raw_openai_response IS 'The raw JSON response from OpenAI for content generation';
COMMENT ON COLUMN posts.persona_alignment_check IS 'The persona alignment check text from OpenAI response';

-- Enable Row Level Security (RLS) on the table
-- This is a good security practice for Supabase tables.
-- Adjust policies as needed for your application's access patterns.
ALTER TABLE posts ENABLE ROW LEVEL SECURITY;

-- Create a policy that allows all operations for authenticated users.
-- For a backend service like this, you might use the service_role key,
-- which bypasses RLS. However, if you plan to access this from a client,
-- more specific policies are crucial.
CREATE POLICY "Allow all for authenticated users" ON posts
    FOR ALL
    USING (auth.role() = 'authenticated')
    WITH CHECK (auth.role() = 'authenticated');

-- If your service will use the service_role key (typical for backend server-side operations),
-- RLS is bypassed, and the above policies won't strictly limit it.
-- However, it's good practice to have them for any potential direct client access.

-- You might also want to add an index on the timestamp for faster querying of recent posts.
CREATE INDEX IF NOT EXISTS idx_posts_timestamp ON posts (timestamp DESC);
